#################################################################################
#                        OneBranch Pipelines - Buddy                            #
# This pipeline was created by EasyStart from a sample located at:              #
#   https://aka.ms/obpipelines/easystart/samples                                #
# Documentation:  https://aka.ms/obpipelines                                    #
# Yaml Schema:    https://aka.ms/obpipelines/yaml/schema                        #
# Retail Tasks:   https://aka.ms/obpipelines/tasks                              #
# Support:        https://aka.ms/onebranchsup                                   #
#################################################################################

trigger: none # https://aka.ms/obpipelines/triggers

parameters: # parameters are shown up in ADO UI in a build queue time
- name: 'debug'
  displayName: 'Enable debug output'
  type: boolean
  default: false

variables:
  system.debug: ${{ parameters.debug }}
  ENABLE_PRS_DELAYSIGN: 1
  ROOT: $(Build.SourcesDirectory)
  REPOROOT: $(Build.SourcesDirectory)
  OUTPUTROOT: $(REPOROOT)\out
  NUGET_XMLDOC_MODE: skip

  WindowsContainerImage: 'onebranch.azurecr.io/windows/ltsc2019/vse2022:latest' # Docker image which is used to build the project https://aka.ms/obpipelines/containers

resources:
  repositories: 
    - repository: templates
      type: git
      name: OneBranch.Pipelines/GovernedTemplates
      ref: refs/heads/main

extends:
  template: v2/OneBranch.NonOfficial.CrossPlat.yml@templates # https://aka.ms/obpipelines/templates
  parameters:
    featureFlags:
      EnableCDPxPAT: false
    globalSdl: # https://aka.ms/obpipelines/sdl
      tsa:
        enabled: false # onebranch publish all sdl results to TSA. If TSA is disabled all SDL tools will forced into 'break' build mode.
      cg:
        failOnAlert: false

    stages:
    - stage: build
      jobs:
      - job: main
        pool:
          type: windows  # read more about custom job pool types at https://aka.ms/obpipelines/yaml/jobs

        variables: # More settings at https://aka.ms/obpipelines/yaml/jobs
          ob_outputDirectory: '$(OUTPUTROOT)' # this directory is uploaded to pipeline artifacts, reddog and cloudvault. More info at https://aka.ms/obpipelines/artifacts
          ob_sdl_binskim_break: true # https://aka.ms/obpipelines/sdl
          ob_artifactBaseName: 'drop'

        steps:
          # Custom Versioning - we will build the version using package.json in versioning commands. 
          - task: PowerShell@2
            displayName: 'Set Version'
            inputs:
              targetType: 'filePath'
              filePath: '$(Build.SourcesDirectory)\.pipelines\version.ps1'
              workingDirectory: '$(Build.SourcesDirectory)'

          # Add the versioning task after running Version script
          - task: onebranch.pipeline.version@1
            inputs:
              system: 'Custom'
              customVersion: '$(CustomBuildNumber)'

          - task: npmAuthenticate@0
            displayName: 'NPM Authenticate'
            inputs:
              workingFile: '$(Build.SourcesDirectory)\vue\.npmrc'

          - task: NodeTool@0
            displayName: 'Install Node.js'
            inputs:
                versionSpec: '16.x'

          - task: PowerShell@2
            displayName: 'Restore'
            inputs:
              targetType: 'filePath'
              filePath: '$(Build.SourcesDirectory)\.pipelines\restore.ps1'
              workingDirectory: '$(Build.SourcesDirectory)'

          - task: PowerShell@2
            displayName: 'Build'
            inputs:
              targetType: 'filePath'
              filePath: '$(Build.SourcesDirectory)\.pipelines\build.ps1'
              workingDirectory: '$(Build.SourcesDirectory)'

          - task: PowerShell@2
            displayName: 'Package'
            inputs:
              targetType: 'filePath'
              filePath: '$(Build.SourcesDirectory)\.pipelines\package.ps1'
              workingDirectory: '$(Build.SourcesDirectory)'

          # Copying build artifacts to the Output folder.
          - task: CopyFiles@2
            displayName: 'Copy Readme and License files to Output folder'
            inputs:
              SourceFolder: '$(Build.SourcesDirectory)'
              Contents: |
                README.md
                LICENSE.txt
              TargetFolder: '$(OUTPUTROOT)\outputs\build\build_artifacts'

          - task: CopyFiles@2
            displayName: 'Copy Dist to Output folder'
            inputs:
              SourceFolder: '$(Build.SourcesDirectory)\vue'
              Contents: |
                dist\**
                package.json
              TargetFolder: '$(OUTPUTROOT)\outputs\build\build_artifacts'

          # Copying source artifacts to the Output folder.
          - task: CopyFiles@2
            displayName: 'Copy source to Output folder'
            inputs:
              SourceFolder: '$(Build.SourcesDirectory)'
              Contents: |
                vue\**\*
                *.md
                LICENSE.txt
                !.git\**\*
                !.pipelines\**\*
                !**\dist\**
                !**\package-lock.json
                !**\node_modules\**\*
                !**\out\**\*
                !**\*.tgz
              TargetFolder: '$(OUTPUTROOT)\outputs\build\source'

          # Copying tgz packages to the Output folder.
          - task: CopyFiles@2
            displayName: 'Copy tar-package to Output folder'
            inputs:
              SourceFolder: '$(Build.SourcesDirectory)\vue'
              Contents: |
                *.tgz
              TargetFolder: '$(OUTPUTROOT)\outputs\package\tgz-package'

          # Signing the files created by the build and packaging script
          - task: onebranch.pipeline.signing@1
            displayName: 'Sign binaries'
            inputs:
              command: 'sign'
              signing_environment: 'azure-ado'
              signing_profile: 'internal_azure_service'
              files_to_sign: '**'
              search_root: '$(OUTPUTROOT)'